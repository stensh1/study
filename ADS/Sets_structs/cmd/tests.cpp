// Orshak Ivan, 1321, 10.09.2023
#include <iostream>
#include <cassert>
#include "vectors.h"
#include "tests.h"

using namespace std;

// Testing functions working with vectors:
void test_vec_func()
{
	// Units: zero | the 1st | the last | all match | null | 1st, last, middle | 2nd null | 1st null | 2nd is smaller | 1st is smaller | disjoint 
	vector <unsigned char> A[] = { {0x0}, {0x0, 0x1}, {0x3, 0xF}, {0x1, 0x2, 0x3}, {}, {0x1, 0x2, 0x3, 0xA, 0xB, 0xD}, {0x1, 0x2, 0x3}, {}, {0x1, 0x2, 0xA, 0xF}, {0x2, 0xB}, {0x1, 0x3, 0x5} };
	vector <unsigned char> B[] = { {0x0}, {0x0, 0x2}, {0x4, 0xF}, {0x1, 0x2, 0x3}, {}, {0x1, 0x6, 0x7, 0x8, 0xA, 0xD}, {}, {0x1, 0x2, 0x3}, {0x2, 0xB}, {0x1, 0x2, 0xA, 0xF}, {0x2, 0x4, 0x6} };
	vector <unsigned char> C[] = { {0x0}, {0x0}, {0xF}, {0x1, 0x2, 0x3}, {}, {0x1, 0xA, 0xD}, {}, {}, {0x2}, {0x2}, {} };
	vector <unsigned char> D[] = { {0x0}, {0x0, 0x1, 0x2}, {0x3, 0x4, 0xF}, {0x1, 0x2, 0x3}, {}, {0x1, 0x2, 0x3, 0x6, 0x7, 0x8, 0xA, 0xB, 0xD}, {0x1, 0x2, 0x3}, {0x1, 0x2, 0x3}, {0x1, 0x2, 0xA, 0xB, 0xF}, {0x1, 0x2, 0xA, 0xB, 0xF}, {0x1, 0x2, 0x3, 0x4, 0x5, 0x6} };

	for (size_t i = 0; i < (sizeof(A) / sizeof(vector <unsigned char>)); i++) assert(vec_intersection(&A[i], &B[i]) == C[i]);
	for (size_t i = 0; i < (sizeof(A) / sizeof(vector <unsigned char>)); i++) assert(vec_unification(&A[i], &B[i]) == D[i]);

	cout << "Vector functions: OK" << endl;
}